## RUN with: docker-compose --env-file ./backend/.env up --build

services:
  strapi:
    container_name: strapi
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: strapi/strapi:latest
    restart: unless-stopped
    env_file: ./backend/.env
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_HOST: strapiDB
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      APP_KEYS: ${APP_KEYS}
      NODE_ENV: ${NODE_ENV}
    volumes:
      - ./backend/config:/opt/app/config
      - ./backend/src:/opt/app/src
      - ./backend/package.json:/opt/package.json
      - ./backend/yarn.lock:/opt/yarn.lock
      - ./backend/.env:/opt/app/.env
      - ./backend/public/uploads:/opt/app/public/uploads
    ports:
      - "1337:1337"
    networks:
      - strapi
    depends_on:
      - strapiDB

  strapiDB:
    container_name: strapiDB
    platform: linux/amd64
    restart: always
    env_file: ./backend/.env
    image: mysql:8.0
    command: >
      mysqld --bind-address=0.0.0.0 --host_cache_size=0 --authentication_policy=mysql_native_password ${ENVIRONMENT_COMMAND}
    environment:
      MYSQL_USER: ${DATABASE_USERNAME}
      MYSQL_ROOT_PASSWORD: ${DATABASE_ROOT_PASSWORD}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_DATABASE: ${DATABASE_NAME}
    volumes:
      - ./backend/strapi-data:/var/lib/mysql
      - ./backend/data:/var/lib/mysql
      - ./backend/certs:/etc/mysql/certs
    ports:
      - "3306:3306"
    networks:
      - strapi
    depends_on:
      - certbot

  certbot:
    image: certbot/certbot
    container_name: certbot
    command:
      - --remove-orphans
    entrypoint: /bin/sh -c " if [ '${ENVIRONMENT}' = 'production' ] && [ ! -f /etc/letsencrypt/live/${DOMAIN}/fullchain.pem ]; then certbot certonly --standalone --noninteractive --agree-tos --email ${EMAIL} -d ${DOMAIN}; cp /etc/letsencrypt/live/${DOMAIN}/fullchain.pem /certs/mysql.crt; cp /etc/letsencrypt/live/${DOMAIN}/privkey.pem /certs/mysql.key; cp /etc/letsencrypt/live/${DOMAIN}/chain.pem /certs/ca.crt; fi"
    volumes:
      - ./backend/certs:/certs
      - ./backend/letsencrypt:/etc/letsencrypt
    environment:
      - DOMAIN=yourdomain.com
      - EMAIL=youremail@domain.com
    networks:
      - strapi
    restart: "no"

  nextjs:
    container_name: nextjs
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      NEXT_PUBLIC_STRAPI_URL: http://strapi:1337
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    networks:
      - strapi
    depends_on:
      - strapi

volumes:
  strapi-data:
  letsencrypt:


networks:
  strapi:
    name: Strapi
    driver: bridge
